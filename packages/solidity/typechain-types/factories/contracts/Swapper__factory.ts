/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type { Swapper, SwapperInterface } from "../../contracts/Swapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amtIn",
        type: "uint256",
      },
      {
        internalType: "address[]",
        name: "_poolPath",
        type: "address[]",
      },
      {
        internalType: "contract IERC20[]",
        name: "_tokenPath",
        type: "address[]",
      },
    ],
    name: "getAmountOutMinKyberClassic",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "path",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "amtIn",
        type: "uint256",
      },
    ],
    name: "getAmountOutMinUniswapV2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "swapERC20",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class Swapper__factory {
  static readonly abi = _abi;
  static createInterface(): SwapperInterface {
    return new Interface(_abi) as SwapperInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Swapper {
    return new Contract(address, _abi, runner) as unknown as Swapper;
  }
}
