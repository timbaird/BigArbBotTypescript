/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  IntegrationUniswapV3,
  IntegrationUniswapV3Interface,
} from "../../contracts/IntegrationUniswapV3";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212200540b429007b5ab45dc0281dc69306ac0ad8803306b4a4e1ddf35dea4b52223664736f6c63430008140033";

type IntegrationUniswapV3ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IntegrationUniswapV3ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IntegrationUniswapV3__factory extends ContractFactory {
  constructor(...args: IntegrationUniswapV3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      IntegrationUniswapV3 & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): IntegrationUniswapV3__factory {
    return super.connect(runner) as IntegrationUniswapV3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IntegrationUniswapV3Interface {
    return new Interface(_abi) as IntegrationUniswapV3Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IntegrationUniswapV3 {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as IntegrationUniswapV3;
  }
}
